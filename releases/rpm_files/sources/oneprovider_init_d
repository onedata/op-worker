#!/bin/bash
#
# chkconfig: 2345 80 30
# description: oneprovider service

### BEGIN INIT INFO
# Provides:		    oneprovider_init
# Required-Start:	$local_fs $remote_fs $network $time
# Required-Stop:	$local_fs $remote_fs $network $time
# Should-Start:		$syslog
# Should-Stop:		$syslog
# Default-Start:	2 3 4 5
# Default-Stop:		0 1 6
# Short-Description:	oneprovider service
# Description:	Start oneprovider nodes that are configured on this machine
### END INIT INFO

# Source function library.
. /etc/init.d/functions

# Needed for erlexec to run
export HOME=/

# Scripts paths
ERL_LUNCHER=/opt/oneprovider/scripts/erl_launcher
INIT_ESCRIPT=/opt/oneprovider/scripts/init.escript

start() {
	start_db ; RETVAL1=$?
	start_oneprovider ; RETVAL2=$?
	return `[ ${RETVAL1} -eq 0 -a ${RETVAL2} -eq 0 ]`
}

start_oneprovider() {
	status_oneprovider_silent ; STATUS=$?
	if [ ${STATUS} -eq 3 ]; then
		echo -n "Starting oneprovider: "
		${ERL_LUNCHER} escript ${INIT_ESCRIPT} start_oneprovider
		RETVAL=$?
		[ ${RETVAL} -eq 0 ] && success || failure
		echo
		return ${RETVAL}
	fi
}

start_db() {
	status_db_silent ; STATUS=$?
	if [ ${STATUS} -eq 3 ]; then
		echo -n "Starting database: "
		${ERL_LUNCHER} escript ${INIT_ESCRIPT} start_db
		RETVAL=$?
		[ ${RETVAL} -eq 0 ] && success || failure
		echo
		return ${RETVAL}
	fi
}

stop() {
	stop_oneprovider ; RETVAL1=$?
	stop_db ; RETVAL2=$?
	return `[ ${RETVAL1} -eq 0 -a ${RETVAL2} -eq 0 ]`
}

stop_oneprovider() {
	status_oneprovider_silent ; STATUS=$?
	if [ ${STATUS} -eq 0 ]; then
		echo -n "Stopping oneprovider: "
		${ERL_LUNCHER} escript ${INIT_ESCRIPT} stop_oneprovider
		RETVAL=$?
		[ ${RETVAL} -eq 0 ] && success || failure
		echo
		return ${RETVAL}
	fi
}

stop_db() {
	status_db_silent ; STATUS=$?
	if [ ${STATUS} -eq 0 ]; then
		echo -n "Stopping database: "
		${ERL_LUNCHER} escript ${INIT_ESCRIPT} stop_db
		RETVAL=$?
		[ ${RETVAL} -eq 0 ] && success || failure
		echo
		return ${RETVAL}
	fi
}

restart() {
	stop ; RETVAL1=$?
	start ; RETVAL2=$?
	return `[ ${RETVAL1} -eq 0 -a ${RETVAL2} -eq 0 ]`
}

status() {
	status_oneprovider ; RETVAL1=$?
    status_db ; RETVAL2=$?
	[[ ${RETVAL1} -eq 0 || ${RETVAL1} -eq 4 ]] && [[ ${RETVAL2} -eq 0 || ${RETVAL2} -eq 4 ]] || return 3
}

status_oneprovider() {
	status_oneprovider_silent ; STATUS=$?
	echo -n "oneprovider: "
	if [ ${STATUS} -eq 0 ]; then
		 echo "running"
	elif [ ${STATUS} -eq 4 ]; then
		echo "not present on host"
	else
		echo "not running."
	fi
	return ${STATUS}
}

status_db() {
	status_db_silent ; STATUS=$?
	echo -n "database: "
	if [ ${STATUS} -eq 0 ]; then
		 echo "running"
	elif [ ${STATUS} -eq 4 ]; then
		echo "not present on host"
	else
		echo "not running"
	fi
	return ${STATUS}
}

status_oneprovider_silent() {
	${ERL_LUNCHER} escript ${INIT_ESCRIPT} status_oneprovider
}

status_db_silent() {
	${ERL_LUNCHER} escript ${INIT_ESCRIPT} status_db
}

case "$1" in
    start|start_oneprovider|start_db)
		# Execute function and create a lock file (required by red-hat based systems)
		$1 && touch /var/lock/subsys/oneprovider
		;;

	restart|force-reload)
		restart && touch /var/lock/subsys/oneprovider
		;;

    stop|stop_oneprovider|stop_db)
		$1
		status_oneprovider_silent || status_db_silent || rm -f /var/lock/subsys/oneprovider
		;;

	status|status_oneprovider|status_db)
		$1
		;;

    *)
        echo "Usage: $0 {start|start_oneprovider|start_db|stop|stop_oneprovider|stop_db|restart|force-reload|status|status_oneprovider|status_db}"
        exit 1
		;;
esac

exit $?
