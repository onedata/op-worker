/**
 * Communication protocol between FUSE client and the server.
 * @author Krzysztof Trzepla
 * @copyright (C) 2015 ACK CYFRONET AGH
 * @copyright This software is released under the MIT license cited in
 * 'LICENSE.txt'
 */

package one.clproto;

import "common_messages.proto";

enum FileType {
    REG = 1; // regular file
    DIR = 2; // directory
    LNK = 3; // symbolic link
}

enum EntryType {
    PATH = 1; // Path to the file
    UUID = 2; // UUID of the file
}

enum FileLocationFlags {
    READ = 1;
    WRITE = 2;
    READ_WRITE = 3;
}

// Generic FUSE client request
message FuseRequest {
    oneof fuse_request { // list of all FUSE client requests
        GetFileAttr get_file_attr = 1;
        GetFileChildren get_file_children = 2;
        CreateDir create_dir = 3;
        DeleteFile delete_file = 4;
        UpdateTimes update_times = 5;
        ChangeMode change_mode = 6;
        Rename rename = 7;
        GetNewFileLocation get_new_file_location = 8;
        GetFileLocation get_file_location = 9;
        GetHelperParams get_helper_params = 10;
        Close close = 11;
        Truncate truncate = 12;
        GetXattr get_xattr = 13;
        SetXattr set_xattr = 14;
        RemoveXattr remove_xattr = 15;
        ListXattr list_xattr = 16;
        SynchronizeBlock synchronize_block = 17;
    }
}

message GetFileAttr {
    required EntryType entry_type = 1;
    required bytes entry = 2;
}

message GetFileChildren {
    required bytes uuid = 1;
    required int32 offset = 2 [default = 0];
    optional int32 size = 3;
}

message CreateDir {
    required bytes parent_uuid = 1;
    required bytes name = 2;
    required uint32 mode = 3;
}

message DeleteFile {
    required bytes uuid = 1;
}

message UpdateTimes {
    required bytes uuid = 1;
    optional int64 atime = 2 [default = -1];
    optional int64 mtime = 3 [default = -1];
    optional int64 ctime = 4 [default = -1];
}

message ChangeMode {
    required bytes uuid = 1;
    required int32 mode = 2;
}

message Rename {
    required bytes uuid = 1;
    required bytes target_path = 2;
}

message GetNewFileLocation {
    required bytes name = 1;
    required bytes parent_uuid = 2;
    required uint32 mode = 3;
    optional FileLocationFlags flags = 4 [default = READ_WRITE];
}

message GetFileLocation {
    required bytes uuid = 1;
    optional FileLocationFlags flags = 2 [default = READ_WRITE];
}

message GetHelperParams {
    required bytes storage_id = 1;
    optional bool force_cluster_proxy = 2 [default = false];
}

message Truncate {
    required bytes uuid = 1;
    required int64 size = 2;
}

message Close {
    required bytes uuid = 1;
}

// Generic FUSE client response
message FuseResponse {
    required Status status = 1;

    oneof fuse_response { // list of all FUSE client responses
        FileAttr file_attr = 2;
        FileChildren file_children = 3;
        FileLocation file_location = 4;
        HelperParams helper_params = 5;
        Xattr xattr = 6;
        XattrList xattr_list = 7;
    }
}

message FileAttr {
    required bytes uuid = 1;
    required bytes name = 2;
    required int32 mode = 3;
    required int32 uid = 4;
    required int32 gid = 5;
    required int64 atime = 6;
    required int64 mtime = 7;
    required int64 ctime = 8;
    required FileType type = 9;
    optional int64 size = 10 [default = 0];
}

message FileChildren {
    repeated ChildLink child_links = 1;
}

message FileLocation {
    required bytes uuid = 1;
    required bytes provider_id = 2;
    required bytes space_id = 3;
    required bytes storage_id = 4;
    required bytes file_id = 5;
    repeated FileBlock blocks = 6;
}

message HelperArg {
    required string key = 1;
    required string value = 2;
}

message HelperParams {
    required bytes helper_name = 1;
    repeated HelperArg helper_args = 2;
}

message GetXattr {
    required bytes uuid = 1;
    required bytes name = 2;
}

message SetXattr {
    required bytes uuid = 1;
    required Xattr xattr = 2;
}

message RemoveXattr {
    required bytes uuid = 1;
    required bytes name = 2;
}

message ListXattr {
    required bytes uuid = 1;
}

message Xattr {
    required bytes name = 1;
    required bytes value = 2;
}

message XattrList {
    repeated bytes names = 1;
}

message SynchronizeBlock {
    required bytes uuid = 1;
    required FileBlock block = 2;
}