%%%-------------------------------------------------------------------
%%% @author Tomasz Lichon
%%% @copyright (C) 2015 ACK CYFRONET AGH
%%% This software is released under the MIT license
%%% cited in 'LICENSE.txt'.
%%% @end
%%%-------------------------------------------------------------------
%%% @doc
%%% This is an globalregistry mock description used by appmock.
%%% @end
%%%-------------------------------------------------------------------
-module(gr_mock_description).
-author("Tomasz Lichon").

-behaviour(mock_app_description_behaviour).

-include_lib("appmock/include/appmock.hrl").
-include_lib("ctool/include/logging.hrl").

-export([rest_mocks/0, tcp_server_mocks/0]).

-define(GR_CA_KEY_DER, {'RSAPrivateKey',
    <<48, 130, 4, 162, 2, 1, 0, 2, 130, 1, 1, 0, 216, 206, 179, 180, 82, 93,
    134, 59, 157, 181, 31, 142, 121, 38, 100, 36, 24, 235, 126, 218,
    220, 131, 211, 145, 197, 228, 241, 194, 235, 174, 232, 248, 225,
    97, 122, 214, 152, 103, 134, 156, 240, 168, 93, 18, 203, 101, 70,
    67, 121, 55, 112, 184, 18, 199, 24, 91, 203, 9, 87, 248, 236, 47,
    34, 71, 71, 161, 31, 57, 0, 130, 41, 97, 141, 23, 24, 82, 145, 51,
    27, 76, 102, 1, 105, 15, 164, 110, 190, 217, 205, 12, 248, 146, 44,
    184, 235, 188, 73, 13, 147, 195, 230, 49, 98, 157, 220, 130, 21,
    227, 198, 118, 240, 9, 173, 170, 74, 254, 100, 114, 112, 0, 156,
    50, 183, 152, 104, 54, 142, 9, 254, 240, 57, 197, 70, 35, 41, 98,
    183, 179, 184, 207, 110, 31, 156, 66, 194, 253, 42, 126, 50, 31,
    87, 141, 165, 245, 241, 58, 42, 56, 12, 118, 103, 140, 0, 41, 114,
    121, 232, 1, 106, 21, 36, 143, 132, 170, 21, 127, 184, 147, 120,
    129, 20, 178, 27, 64, 245, 51, 5, 97, 80, 13, 5, 24, 51, 165, 184,
    179, 222, 123, 127, 217, 212, 197, 14, 209, 126, 25, 59, 18, 56, 3,
    144, 194, 63, 225, 132, 94, 251, 56, 110, 96, 19, 139, 163, 40, 28,
    130, 1, 215, 96, 142, 21, 11, 217, 141, 86, 16, 54, 120, 69, 210,
    234, 108, 226, 176, 114, 112, 211, 169, 228, 144, 216, 236, 91,
    166, 183, 253, 2, 3, 1, 0, 1, 2, 130, 1, 0, 85, 5, 25, 235, 136, 177,
    44, 70, 140, 157, 206, 118, 44, 132, 37, 153, 18, 60, 167, 78, 100,
    83, 61, 208, 88, 110, 99, 112, 48, 196, 50, 144, 6, 178, 23, 93,
    183, 254, 65, 7, 162, 72, 35, 215, 142, 243, 116, 14, 89, 166, 168,
    9, 71, 51, 212, 21, 139, 21, 106, 238, 46, 144, 125, 60, 190, 150,
    44, 140, 73, 234, 193, 23, 132, 32, 158, 101, 34, 147, 140, 12,
    245, 163, 111, 243, 182, 99, 199, 107, 217, 193, 80, 104, 226, 40,
    210, 40, 207, 237, 7, 25, 55, 87, 254, 120, 49, 84, 194, 8, 196,
    119, 55, 194, 83, 220, 7, 244, 162, 167, 77, 204, 175, 116, 36, 19,
    28, 42, 232, 159, 193, 203, 177, 5, 58, 103, 180, 114, 36, 92, 242,
    67, 174, 158, 44, 158, 237, 89, 158, 236, 6, 92, 36, 249, 101, 54,
    35, 161, 179, 152, 64, 194, 88, 24, 249, 251, 38, 86, 51, 0, 222,
    32, 86, 146, 47, 11, 121, 39, 181, 46, 6, 127, 65, 2, 148, 173, 172,
    6, 227, 24, 52, 179, 5, 173, 241, 221, 95, 129, 9, 175, 190, 249,
    251, 177, 174, 157, 195, 209, 53, 67, 171, 148, 100, 112, 100,
    237, 165, 210, 81, 152, 175, 157, 242, 57, 176, 91, 175, 85, 105,
    71, 170, 21, 39, 40, 217, 8, 175, 156, 177, 76, 89, 198, 155, 120,
    91, 208, 168, 72, 3, 13, 83, 38, 69, 195, 226, 48, 229, 129, 2, 129,
    129, 0, 249, 81, 189, 51, 207, 151, 135, 36, 11, 123, 239, 57, 117,
    134, 75, 204, 69, 8, 239, 118, 117, 75, 93, 56, 83, 202, 143, 38,
    81, 12, 57, 222, 240, 211, 232, 15, 45, 107, 233, 26, 90, 208, 249,
    36, 247, 142, 60, 122, 129, 67, 202, 68, 32, 104, 9, 101, 29, 156,
    211, 217, 218, 82, 184, 2, 255, 38, 213, 30, 32, 37, 22, 239, 157,
    58, 159, 32, 136, 211, 83, 43, 96, 27, 89, 155, 140, 88, 12, 28, 94,
    32, 229, 124, 195, 199, 61, 170, 153, 201, 181, 233, 249, 95, 19,
    21, 204, 181, 110, 125, 162, 190, 80, 174, 33, 252, 186, 37, 67,
    12, 134, 12, 188, 78, 214, 237, 164, 15, 85, 25, 2, 129, 129, 0,
    222, 157, 240, 200, 248, 211, 195, 116, 228, 145, 33, 213, 182,
    153, 31, 103, 74, 171, 59, 166, 190, 97, 90, 46, 248, 11, 209, 103,
    125, 69, 71, 150, 178, 187, 66, 208, 131, 193, 153, 201, 113, 171,
    122, 164, 58, 208, 77, 3, 245, 39, 0, 180, 3, 156, 115, 121, 148,
    52, 77, 252, 175, 28, 126, 102, 136, 44, 244, 147, 15, 228, 33, 45,
    134, 254, 102, 115, 238, 161, 25, 76, 203, 244, 2, 89, 125, 63,
    166, 143, 71, 172, 240, 96, 154, 143, 4, 228, 212, 130, 107, 192,
    149, 162, 78, 11, 62, 213, 48, 80, 139, 191, 68, 32, 38, 10, 245,
    248, 152, 198, 2, 24, 116, 32, 33, 135, 190, 9, 210, 133, 2, 129,
    128, 57, 51, 99, 177, 75, 99, 124, 129, 236, 144, 150, 166, 28, 44,
    159, 159, 82, 7, 102, 201, 74, 199, 235, 175, 76, 170, 32, 133,
    173, 250, 156, 28, 102, 44, 120, 5, 99, 106, 106, 164, 189, 73, 76,
    160, 10, 155, 251, 140, 47, 180, 25, 231, 223, 119, 127, 16, 79,
    230, 247, 67, 248, 47, 26, 64, 181, 193, 119, 11, 222, 92, 36, 18,
    253, 131, 193, 150, 121, 77, 226, 187, 4, 229, 193, 125, 74, 137,
    184, 221, 153, 74, 250, 219, 209, 31, 25, 42, 214, 245, 204, 98,
    205, 239, 222, 53, 22, 46, 90, 23, 65, 11, 96, 255, 82, 148, 229,
    48, 63, 93, 212, 51, 127, 208, 166, 199, 6, 232, 237, 161, 2, 129,
    128, 46, 245, 33, 213, 66, 167, 104, 147, 63, 163, 93, 127, 183, 4,
    149, 155, 52, 36, 234, 112, 65, 184, 71, 77, 161, 4, 221, 38, 247,
    69, 165, 212, 35, 223, 92, 56, 159, 146, 54, 222, 71, 27, 228, 194,
    191, 165, 48, 153, 165, 28, 149, 9, 99, 185, 156, 162, 8, 160, 255,
    210, 77, 29, 181, 139, 235, 45, 144, 105, 116, 240, 170, 14, 240,
    106, 185, 49, 187, 36, 64, 49, 242, 211, 133, 171, 90, 192, 18, 98,
    38, 188, 83, 248, 12, 162, 30, 102, 38, 109, 92, 77, 67, 66, 249,
    51, 102, 13, 146, 35, 107, 86, 237, 7, 218, 254, 116, 227, 251, 85,
    201, 27, 95, 99, 103, 175, 58, 102, 216, 1, 2, 129, 128, 114, 12,
    160, 222, 177, 250, 114, 173, 238, 215, 213, 197, 40, 12, 130,
    186, 103, 130, 12, 183, 16, 210, 68, 101, 40, 239, 194, 214, 135,
    142, 88, 94, 32, 231, 111, 198, 220, 208, 66, 177, 25, 218, 126,
    36, 126, 90, 76, 229, 178, 40, 92, 58, 143, 69, 83, 139, 39, 143,
    164, 100, 130, 23, 151, 97, 4, 233, 108, 253, 56, 166, 76, 234, 88,
    225, 120, 41, 238, 35, 129, 144, 30, 185, 226, 212, 143, 200, 31,
    188, 223, 137, 251, 218, 245, 116, 214, 215, 135, 144, 34, 99, 94,
    154, 180, 196, 179, 72, 184, 88, 89, 139, 243, 128, 236, 241, 140,
    206, 46, 14, 67, 74, 93, 175, 178, 230, 223, 14, 247, 176>>}).

-define(GR_CA_CERT_PEM,
    <<"-----BEGIN CERTIFICATE-----\n",
    "MIIEtTCCA52gAwIBAgIJAJ1DacBLmj8lMA0GCSqGSIb3DQEBBQUAMIGGMQswCQYD\n",
    "VQQGEwJQTDETMBEGA1UECAwKTWFsb3BvbHNrYTEPMA0GA1UEBwwGS3Jha293MRkw\n",
    "FwYDVQQKDBBBQ0MgQ3lmcm9uZXQgQUdIMRAwDgYDVQQLDAdvbmVkYXRhMSQwIgYD\n",
    "VQQDDBtHbG9iYWwgUmVnaXN0cnkgUHJvdmlkZXIgQ0EwHhcNMTQwOTI3MTYxMjAz\n",
    "WhcNMjQwOTI0MTYxMjAzWjCBhjELMAkGA1UEBhMCUEwxEzARBgNVBAgMCk1hbG9w\n",
    "b2xza2ExDzANBgNVBAcMBktyYWtvdzEZMBcGA1UECgwQQUNDIEN5ZnJvbmV0IEFH\n",
    "SDEQMA4GA1UECwwHb25lZGF0YTEkMCIGA1UEAwwbR2xvYmFsIFJlZ2lzdHJ5IFBy\n",
    "b3ZpZGVyIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2M6ztFJd\n",
    "hjudtR+OeSZkJBjrftrcg9ORxeTxwuuu6PjhYXrWmGeGnPCoXRLLZUZDeTdwuBLH\n",
    "GFvLCVf47C8iR0ehHzkAgilhjRcYUpEzG0xmAWkPpG6+2c0M+JIsuOu8SQ2Tw+Yx\n",
    "Yp3cghXjxnbwCa2qSv5kcnAAnDK3mGg2jgn+8DnFRiMpYrezuM9uH5xCwv0qfjIf\n",
    "V42l9fE6KjgMdmeMAClyeegBahUkj4SqFX+4k3iBFLIbQPUzBWFQDQUYM6W4s957\n",
    "f9nUxQ7Rfhk7EjgDkMI/4YRe+zhuYBOLoygcggHXYI4VC9mNVhA2eEXS6mzisHJw\n",
    "06nkkNjsW6a3/QIDAQABo4IBIjCCAR4wHQYDVR0OBBYEFLfMinRQFlMH5BPt1q5x\n",
    "+6/Xa1DQMIG7BgNVHSMEgbMwgbCAFLfMinRQFlMH5BPt1q5x+6/Xa1DQoYGMpIGJ\n",
    "MIGGMQswCQYDVQQGEwJQTDETMBEGA1UECAwKTWFsb3BvbHNrYTEPMA0GA1UEBwwG\n",
    "S3Jha293MRkwFwYDVQQKDBBBQ0MgQ3lmcm9uZXQgQUdIMRAwDgYDVQQLDAdvbmVk\n",
    "YXRhMSQwIgYDVQQDDBtHbG9iYWwgUmVnaXN0cnkgUHJvdmlkZXIgQ0GCCQCdQ2nA\n",
    "S5o/JTAMBgNVHRMEBTADAQH/MDEGA1UdHwQqMCgwJqAkoCKGIGh0dHBzOi8vb25l\n",
    "ZGF0YS5vcmc6ODQ0My9jcmwucGVtMA0GCSqGSIb3DQEBBQUAA4IBAQBQ+qFT1OTs\n",
    "fBbINQUt+kLutnepinzi9OtIVVfy5DZkHV3oah68swmq94yKLTAYeu4mMbOzgXze\n",
    "9Q1nWbSPinpPUijaopyJ4KArX07SpBRdTcSjpGbxIKBlE1I7NunCyjcaV5cpB2Ys\n",
    "7l3jWa/JEMJn+5IB/fxE4dLs7OuVpC1nuT3FtWvdfAnF5fhTsNsuvEM0TETo+XoX\n",
    "NCM8aLjawFOSuJ94yzU/k6C6z0r+KQsWhps7JVpieNfKfO2/WWkVMZQHhPq65nFb\n",
    "4AolvNlASgCa4/WAhOL9NlD4XYRy3XFGsDL6hs+Ng77N66S4piJIgazcHqUIBvCE\n",
    "yKLd2j9A+6Ev\n",
    "-----END CERTIFICATE-----\n">>).

-define(TRUSTED_CLIENT_PEM_CERT,
    <<"-----BEGIN CERTIFICATE-----\n",
    "MIIEqTCCApGgAwIBAgIBUDANBgkqhkiG9w0BAQUFADBcMQswCQYDVQQGEwJQTDET\n",
    "MBEGA1UECAwKU29tZS1TdGF0ZTEZMBcGA1UECgwQQUNLIEN5ZnJvbmV0IEFHSDEd\n",
    "MBsGA1UEAwwUVmVpbENsdXN0ZXJUZXN0U3ViQ0EwHhcNMTQwNTEzMTMwODQxWhcN\n",
    "NDQwNTA1MTMwODQxWjBXMQswCQYDVQQGEwJQTDETMBEGA1UECAwKU29tZS1TdGF0\n",
    "ZTEZMBcGA1UECgwQQUNLIEN5ZnJvbmV0IEFHSDEYMBYGA1UEAwwPVmVpbENsaWVu\n",
    "dFRlc3QxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlU05yCDqXrxB\n",
    "uHR8klHGrSHUgQCYKaDQ7B8iUNWKS1RkVxWNuOWIfm8/WYqa84nYJ6V71NDiX8P/\n",
    "cx0DwLf/2a/DNl1DKabobDF2zSHBPyrOFhRcoIdJzl7bzMap0g0Vg2trT9n+h5bu\n",
    "2FKJcbXwRknutg3A47+2vfZ4sqpNHTdrhoFAxRhRMBXCprB+C3sKJ3mz8tTPN466\n",
    "PZhAKrvqEO/PWDELF9PlYWp/y/9IQZn1Hm/95KgA9n4lLKD2F6g8VGTihcfTmtd5\n",
    "e5hlOl+qi3nKGxUuo1+bVeITnqnbfHxBigCBgMT6ufN+suel9oemLc2CSqAeTYNq\n",
    "59rPHg694wIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVu\n",
    "U1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU1vPmSXV9PlT5lSeb\n",
    "sxRaE3rlj0kwHwYDVR0jBBgwFoAUPR10+w3m2nWPR3VVcCM1Ew+Dh6MwDQYJKoZI\n",
    "hvcNAQEFBQADggIBAHYIw2x9nVVY0vZZe2eprh89fs6r/KQwBTXvLLLcCHGWMf8C\n",
    "XzLZ8AIC7GF204IkNC7fB0ukA5p+XBMnx2YFvqYycvXJpXWQNb0qei0Hll/MlCdu\n",
    "re90+U4Gp/9o6xF8Ot2Ax/DCihpskxlRw1SDX3wR2vUFBjbJueWTM/BCvUqIPTUc\n",
    "bNf+OaB9gqxdBiF5JtCRDtZLmHRC/NODqCph2BPnle1F2nxmEOLbitCctXRXf7sl\n",
    "KBYfdEQwuJXsS+NPBiRGDNmXsFRw9OzhkWeXVCGA0jStceNEssbB+UMZzrVMYMKs\n",
    "JgBYILise4WJsa+A/y+62uEfYljF49u60YswPaYFXfxf5bUHQGVubsHmoPTAZYAV\n",
    "5tGPu2F/fMhdrnLDMbMvBVrBxN3VaRMl5hkkMVReqrQ/BVtNx7yuG0vnC/X3f6nC\n",
    "fKtFb/JeilzNBRPw0TyxV9zYEGIE9DCUwQeARFZ2yVlY26G2Rjdib3fM+9q9/Ebq\n",
    "lj6eGKusytCVEXMcA4nhz/Ok7Z1PvuiZiV716qvphlxb62FcTGitvT8ee6rVcWG2\n",
    "FxT+9BUfxY3vRAViPgliUbx5nOPUj5JoquW2K7BqRQQiOXHhIlWyF0E6/6Yqno6c\n",
    "jtIkIo7RP21iAr+PeLcuK4PAf9x3wK8c1Ag02HA6oAnHGk1bq/C59YBMzxFI\n",
    "-----END CERTIFICATE-----\n">>).

rest_mocks() ->
    [
        #rest_mock{port = 8443, path = <<"/user">>,
            response = fun(Req, State) ->
                case req:header(<<"authorization">>, Req) of
                    <<"Bearer TOKEN">> ->
                        ResponseBody = mochijson2:encode([
                            {<<"userId">>, <<"test_id">>},
                            {<<"name">>, <<"test_name">>}
                        ]),
                        {#rest_response{code = 200, body = ResponseBody, content_type = <<"application/json">>}, State};
                    _ ->
                        {#rest_response{code = 403}, State}
                end
            end,
            initial_state = undefined},
        #rest_mock{port = 8443, path = <<"/user/spaces">>,
                    response = fun(Req, State) ->
                        case req:header(<<"authorization">>, Req) of
                            <<"Bearer TOKEN">> ->
                                ResponseBody = mochijson2:encode([
                                    {<<"default">>, <<"space0">>},
                                    {<<"spaces">>, [<<"space0">>]}
                                ]),
                                {#rest_response{code = 200, body = ResponseBody, content_type = <<"application/json">>}, State};
                            _ ->
                                {#rest_response{code = 403}, State}
                        end
                    end,
                    initial_state = undefined},
        #rest_mock{port = 8443, path = <<"/user/providers/050fec8f157d6e4b31fd6d2924923c7a/auth_proxy">>,
            response = fun
                (_, reject) ->
                    {#rest_response{code = 401, headers = []}, accept};
                (Req, State) ->
                    {<<"https://gr.", Rest/binary>>, _} = cowboy_req:host_url(Req),
                    ProviderUrl = binary_to_list(<<"https://worker1.", Rest/binary, "/rest/latest/auth">>),
                    [{_, CACertEncoded, _} | _] = public_key:pem_decode(?GR_CA_CERT_PEM),
                    ResponseBody = mochijson2:encode(
                        [
                            {<<"user">>, [
                                {<<"userId">>, <<"test_id">>},
                                {<<"name">>, <<"test_name">>}
                            ]},
                            {<<"cert">>, ?TRUSTED_CLIENT_PEM_CERT}
                        ]),
                    {ok, "201", _, _} = ibrowse:send_req(
                        ProviderUrl,
                        [{"Content-Type", "application/json"}],
                        put,
                        ResponseBody,
                        [{ssl_options, [{key, ?GR_CA_KEY_DER}, {cacerts, [CACertEncoded]}, {cert, CACertEncoded}]}]
                    ),

                    case cowboy_req:qs_val(<<"ref">>, Req) of
                        {undefined, _} -> {#rest_response{code = 204}, State};
                        {Referer, _} ->
                            Location = {<<"location">>, Referer},
                            {#rest_response{code = 307, headers = [Location]}, State}
                    end
            end,
            initial_state = reject}

    ].

tcp_server_mocks() -> [].
