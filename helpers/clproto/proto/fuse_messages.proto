/**
 * Communication protocol between FUSE client and the server.
 * @author Krzysztof Trzepla
 * @copyright (C) 2015 ACK CYFRONET AGH
 * @copyright This software is released under the MIT license cited in
 * 'LICENSE.txt'
 */

package one.clproto;

import "common_messages.proto";

enum FileType {
    REG = 1; // regular file
    DIR = 2; // directory
    LNK = 3; // symbolic link
}

enum FileLocationFlags {
    READ = 1;
    WRITE = 2;
    READ_WRITE = 3;
}

// Generic FUSE client request
message FuseRequest {
    oneof fuse_request { // list of all FUSE client requests
        ResolveGuid resolve_guid = 1;
        GetHelperParams get_helper_params = 2;
        CreateStorageTestFile create_storage_test_file = 3;
        VerifyStorageTestFile verify_storage_test_file = 4;
        FileRequest file_request = 5;
    }
}

message ResolveGuid {
    required bytes path = 1;
}

message GetHelperParams {
    required bytes storage_id = 1;
    optional bool force_proxy_io = 2 [default = false];
}

message CreateStorageTestFile {
    required bytes storage_id = 1;
    required bytes file_uuid  = 2;
}

message VerifyStorageTestFile {
    required bytes storage_id   = 1;
    required bytes space_uuid   = 2;
    required bytes file_id      = 3;
    required bytes file_content = 4;
}

// Generic FUSE client file request
message FileRequest {
    required bytes context_guid = 1;

    oneof file_request { // list of all FUSE client file requests
        GetFileAttr get_file_attr = 2;
        GetFileChildren get_file_children = 3;
        CreateDir create_dir = 4;
        DeleteFile delete_file = 5;
        UpdateTimes update_times = 6;
        ChangeMode change_mode = 7;
        Rename rename = 8;
        GetNewFileLocation get_new_file_location = 9;
        GetFileLocation get_file_location = 10;
        Release release = 11;
        Truncate truncate = 12;
        SynchronizeBlock synchronize_block = 13;
        SynchronizeBlockAndComputeChecksum synchronize_block_and_compute_checksum = 14;
    }
}

message GetFileAttr {
}

message GetFileChildren {
    required int32 offset = 1 [default = 0];
    optional int32 size = 2;
}

message CreateDir {
    required bytes name = 1;
    required uint32 mode = 2;
}

message DeleteFile {
    optional bool  silent = 1 [default = false];
}

message UpdateTimes {
    optional int64 atime = 1 [default = -1];
    optional int64 mtime = 2 [default = -1];
    optional int64 ctime = 3 [default = -1];
}

message ChangeMode {
    required int32 mode = 1;
}

message Rename {
    required bytes target_path = 1;
}

message GetNewFileLocation {
    required bytes name = 1;
    required uint32 mode = 2;
    optional FileLocationFlags flags = 3 [default = READ_WRITE];
    optional bool create_handle = 4 [default = true];
}

message GetFileLocation {
    optional FileLocationFlags flags = 1 [default = READ_WRITE];
    optional bool create_handle = 2 [default = true];
}

message Release {
    required bytes handle_id = 1;
}

message Truncate {
    required int64 size = 1;
}

message SynchronizeBlock {
    required FileBlock block    = 1;
    optional bool      prefetch = 2 [default = true];
}

message SynchronizeBlockAndComputeChecksum {
    required FileBlock block = 1;
}

// Generic FUSE client response
message FuseResponse {
    required Status status = 1;

    oneof fuse_response { // list of all FUSE client responses
        FileAttr file_attr = 2;
        FileChildren file_children = 3;
        FileLocation file_location = 4;
        HelperParams helper_params = 5;
        StorageTestFile storage_test_file = 6;
        Dir dir = 7;
        Checksum checksum = 8;
        FileRenamed file_renamed = 9;
    }
}

message FileAttr {
    required bytes uuid = 1;
    required bytes name = 2;
    required int32 mode = 3;
    required int32 uid = 4;
    required int32 gid = 5;
    required int64 atime = 6;
    required int64 mtime = 7;
    required int64 ctime = 8;
    required FileType type = 9;
    optional int64 size = 10 [default = 0];
}

message FileChildren {
    repeated ChildLink child_links = 1;
}

message FileLocation {
    required bytes uuid = 1;
    required bytes provider_id = 2;
    required bytes space_id = 3;
    required bytes storage_id = 4;
    required bytes file_id = 5;
    repeated FileBlock blocks = 6;
    optional bytes handle_id = 7;
}

message HelperArg {
    required string key = 1;
    required string value = 2;
}

message HelperParams {
    required bytes helper_name = 1;
    repeated HelperArg helper_args = 2;
}

message StorageTestFile {
    required HelperParams helper_params = 1;
    required bytes        space_uuid    = 2;
    required bytes        file_id       = 3;
    required bytes        file_content  = 4;
}

message Checksum {
    required bytes value = 1;
}

message FileRenamed {
    required bytes new_uuid = 1;                 // new UUID of renamed file
    repeated FileRenamedEntry child_entries = 2; // entries for children of
                                                 // renamed file
}
