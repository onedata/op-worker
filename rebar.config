%% behaviours should be compiled before other files
{erl_first_files, [
    "src/oneprovider_modules/worker_plugin_behaviour.erl",
    "src/oneprovider_modules/control_panel/rest_modules/rest_module_behaviour.erl",
    "src/oneprovider_modules/control_panel/utils/session_logic_behaviour.erl"
]}.

%% directory for releases
{sub_dirs, ["releases"]}.

%% to include deps headers
{lib_dirs, ["deps"]}.

%% options for documentation tool
{edoc_opts, [no_packages]}.

%% eunit opts - Maven-like output formatting
{eunit_opts, [verbose, {report, {eunit_surefire, [{dir, "../test/eunit_results"}]}}]}.

%% Test coverage
{cover_enabled, true}.

%% deps options
{deps, [
    {ctool,".*", {git, "ssh://git@git.plgrid.pl:7999/vfs/ctool.git", {tag, "f88339b"}}},
    {meck, "0.8.2", {git, "https://github.com/eproxus/meck.git", {tag, "0.8.2"}}},
    {protobuffs, "0.8.1p4", {git, "https://github.com/basho/erlang_protobuffs.git", {tag, "0.8.1p4"}}},
    {gen_server_mock, ".*", {git, "git://github.com/brucexin/gen_server_mock.git", {tag, "de3cd8e"}}},
    {yamler, ".*", {git, "git://github.com/goertzenator/yamler.git", {tag, "c0ec227"}}},
    {mochiweb, ".*", {git, "git://github.com/mochi/mochiweb.git", {tag, "v2.8.0"}}},
    {basho_bench, ".*", {git, "git://github.com/RoXeon/basho_bench.git", {tag, "e385af2"}}, [raw]},
    {websocket_client, ".*", {git, "git://github.com/RoXeon/websocket_client", {tag, "c8a2554"}}},
    {dao,".*", {git, "ssh://git@git.plgrid.pl:7999/vfs/dao.git", {tag, "39ba06c"}}}
]}.

%% pre-hooks
{pre_hooks, [
    {eunit, "mkdir -p test/eunit_results"}, %% Make dir for eunit' surefire test results
    {eunit, "epmd -daemon"}, %% Sometimes, in some cases epmd daemon doesn't start during eunit tests, so we need to force start it
    {compile, "mkdir -p c_lib"},
    {compile, "ln -sf `g++ -print-file-name=libstdc++.a` c_lib"}, %% libstdc++ static linkage
    {compile, "chmod +x c_src/helpers_nif/build_helpers.sh"},
    {compile, "chmod +x c_src/oneproxy/build_oneproxy.sh"},
    {compile, "c_src/helpers_nif/build_helpers.sh"},
    {compile, "c_src/oneproxy/build_oneproxy.sh c_lib"}
]}.

{post_hooks, [
    {'get-deps', "cp -Rf ./deps/ctool/src/gui_static/* ./src/gui_static/"},
    {compile, "chmod +x c_src/link_shared.sh"},
    {compile, "./c_src/link_shared.sh globus gpv_drv.so helpers_drv.so oneproxy"},
    {compile, "./c_src/link_shared.sh boost helpers_drv.so gpv_drv.so libhelpers.so libhelpers.dylib oneproxy"},
    {compile, "./c_src/link_shared.sh ssl helpers_drv.so gpv_drv.so libhelpers.so libhelpers.dylib oneproxy"},
    {compile, "./c_src/link_shared.sh ltdl gpv_drv.so helpers_drv.so libhelpers.so libhelpers.dylib oneproxy"},
    {compile, "./c_src/link_shared.sh krb gpv_drv.so helpers_drv.so libhelpers.so libhelpers.dylib oneproxy"},
    {compile, "./c_src/link_shared.sh c++ gpv_drv.so helpers_drv.so libhelpers.so libhelpers.dylib oneproxy"},
    {compile, "./c_src/link_shared.sh stdc++ gpv_drv.so helpers_drv.so libhelpers.so libhelpers.dylib oneproxy"},
    {compile, "./c_src/link_shared.sh k5 gpv_drv.so helpers_drv.so libhelpers.so libhelpers.dylib oneproxy"},
    {compile, "./c_src/link_shared.sh crypto helpers_drv.so gpv_drv.so libhelpers.so libhelpers.dylib oneproxy"},
    {compile, "./c_src/link_shared.sh protobuf helpers_drv.so libhelpers.so libhelpers.dylib"},
    {compile, "./c_src/link_shared.sh botan oneproxy"},
    {compile, "rm -rf c_lib/*.a"},
    {doc, "./generate_test_doc.sh"},
    %% Change rpath in NIF libs on Darwin
    {"darwin", compile, "install_name_tool -change libhelpers.dylib @loader_path/libhelpers.dylib c_lib/helpers_drv.so"},
    {"darwin", compile, "install_name_tool -change libhelpers.dylib @loader_path/libhelpers.dylib c_lib/gpv_drv.so"}
]}.

%% Cleanup
{clean_files, ["test/eunit_results", "distributed_tests_out", "c_lib", "helpers/build", "c_src/oneproxy/build"]}.

%% Erlang options, defines
{erl_opts, []}.
%% Add the tuple below to erl_opts proplist to turn on lager parse transform (this is not needed as long as ctool logger is used)
%% {parse_transform, lager_transform}
%% Add the tuple below to erl_opts proplist to completely turn off debug messages
%% {d, skip_debug}

{port_specs, [
    {"c_lib/helpers_drv.so", ["c_src/helpers_nif/helpers_nif.cc", "c_src/helpers_nif/term_translator.cc"]}
]}.

{port_env, [
    {"LDFLAGS", "$LDFLAGS -lhelpers -Bstatic -lboost_system-mt -lboost_thread-mt -Wl,-rpath,./c_lib -Wl,-rpath,./c_lib -Wl,-rpath,../c_lib -Wl,-rpath,. -L ./c_lib"},
    {"CXXFLAGS", "$CXXFLAGS -std=c++11 -I ./helpers/include -I ./helpers/release -I ./helpers/release/include -DFUSE_USE_VERSION=29 `pkg-config fuse --cflags`"}
]}.

% Options for erlyDTL (templates for GUI)
{erlydtl_opts, [
    {doc_root, "src/gui_static/templates"},
    {out_dir, "ebin"},
    {source_ext, ".html"},
    {module_ext, "_view"}
]}.
